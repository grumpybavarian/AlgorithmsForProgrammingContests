#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <map>
#include <stack>
using namespace std;

int w,h;
pair<int,int> water;
vector<pair<int,int>> plants;
map<pair<int,int>,bool> isPlant;

bool isGardenValid(vector<vector<int>> g) {
map<pair<int,int>,bool> visited;
int visitedPlants = 0;
queue<pair<int,int>> q;

q.push(water);
visited[water] = true;

while (!q.empty()) {
pair<int,int> next = q.front();
q.pop();
int x = next.first;
int y = next.second;
vector<pair<int,int>> neighbors = {{x,y+1},{x,y-1},{x+1,y},{x-1,y}};
for (auto item : neighbors) {
int xi = item.first;
int yi = item.second;
if (xi>=0 && xi<4 && yi>=0 && yi<4 && !visited[item] && g[xi][yi] != -1) {
if (g[xi][yi] <= g[x][y]) {
q.push(item);
visited[item] = true;
if (isPlant[item]) ++visitedPlants;
}
}
}
if (visitedPlants == plants.size()) return true;
}

return false;
}

int main() {
ios_base::sync_with_stdio(false);
int t;
cin >> t;
double start = clock();
for (int ti=1; ti<=t; ++ti) {
cin >> h >> w;
vector<vector<int>> garden (4, vector<int>(4,0));
vector<pair<int,int>> questions;
plants = vector<pair<int,int>>();
isPlant = map<pair<int,int>,bool>();
for (int i=0; i<4; ++i) {
for (int j=0; j<4; ++j) {
char x;
cin >> x;
if (x == '_') {
garden[i][j] = -1;
}
else if (x == '*') {
garden[i][j] = w;
water = {i,j};
}
else if (x == '?') {
questions.push_back({i,j});
}
else {
garden[i][j] = x - '0';
isPlant[{i,j}] = true;
plants.push_back({i,j});

}
}
}
if (questions.size() == 0) {
if (isGardenValid(garden))
cout << "Case #" << ti << ": 1\n";
else
cout << "Case #" << ti << ": 0\n";
continue;
}
vector<int> v(questions.size(), 0);
bool cont = true;
int sum = 0;
while (cont) {
for (int i=v.size()-1; i>=0; --i) {
++v[i];
v[i] = v[i] % (h+1);
if (v[0] == 0 && i==0) cont = false;
if (v[i] != 0) break;
}
for (int i=0; i<v.size(); ++i) {
int x = questions[i].first;
int y = questions[i].second;
garden[x][y] = v[i];
}
if (isGardenValid(garden)) ++sum;
}

cout << "Case #" << ti << ": " << sum << "\n";
}
double end = clock() - start;
cout << end/CLOCKS_PER_SEC << endl;
return 0;
}

/*
2 1 1
*0__
____
____
____

2 2
_*__
1?1_
_1__
____
*/
/*
7 3 3 __*_ __?_ ???_ 121_
3 3 ____ *?__ _?2_ ____
2 1 1*0_ 1??_ ____ ____
2 2 __1* __?0 __?? __??
5 3 ___3 ___* __?2 __0_
3 1 ____ 000_ *0?? 1??_
1 0 ____ ?100 *0?? ??__
*/
/*
1
6 6
*000
???0
???_
?0_0
*/
/*
1 3 3
3*3_
3?21
3?21
?221
*/